name: Deploying application on Cloud run


on:
  workflow_call:

env: 
  tag: ${GITHUB_REF#refs/*/}
    

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Test
        run: ${{ env.tag }}
  deploy_on_dev:
    if: contains(github.ref, "dev")
    runs-on: ubuntu-latest
    steps:
      - name: Make repo name variable compliant with K8 namespace rules
        run: echo "reponame=$(echo ${{ github.event.repository.name }} | tr _ - )" >> $GITHUB_ENV
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.SA_CREDENTIALS }}
      - name: Setup SDK 
        uses: google-github-actions/setup-gcloud@main 
        with:
          project_id: labs-370214
          export_default_credentials: true 
      - name: Setup docker 
        run: gcloud auth configure-docker --quiet
      - name: Build and push image
        working-directory: ./
        run: |
          docker build . -t gcr.io/labs-370214/${{ env.reponame }}:${{env.tag}}
          docker push gcr.io/labs-370214/${{ env.reponame }}:${{env.tag}}
      - name: Checkout Pipeline repository
        uses: actions/checkout@v3
        with:
          repository: wgall/cloudrun_laravel_cicd
          token: ${{ secrets.CLOUDRUN_GIT_TOKEN }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5
          terraform_wrapper: false
      - name: Check if registry exists
        id: repository_status
        run: gcloud run services list | grep ${{ env.project }}-dev | echo ::set-output name=exists::true || echo ::set-output name=exists::false
      - name: Create Backend folder
        if: steps.repository_status.outputs.exists == 'false'
        working-directory: ./bucket
        run: terraform init && terraform apply -y -var "project=${{ env.reponame }}-stage/"
      - name: Initialize terraform 
        working-directory: ./dev
        run: terraform init -var "project="${{ env.reponame }}-dev" -force-copy
      - name: Apply terraform 
        working-directory: ./dev
        run: | 
         host=$(terraform apply --auto-approve -var "image=${{env.reponame}}" -var "tag=${{env.tag}}" -var "project=${{env.reponame}}-dev" | grep "backend-id =" | cut -d " " -f 3) 
         gcloud compute url-maps add-path-matcher test --path-matcher-name=${{env.reponame}}-dev --default-service=https://www.googleapis.com/compute/v1/$host
         gcloud compute url-maps add-host-rule test --hosts="${{env.reponame}}-dev.gallit.net" --path-matcher-name=${{env.reponame}}-dev
         

      
  # deploy_on_stage: 
  #   if: ${GITHUB_REF#refs/*/} != 'dev' 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Make repo name variable compliant with K8 namespace rules
  #       run: echo "reponame=$(echo ${{ github.event.repository.name }} | tr _ - )" >> $GITHUB_ENV
  #     - name: Checkout Pipeline repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: wgall/cloudrun_laravel_cicd
  #         token: ${{ secrets.CLOUDRUN_GIT_TOKEN }}
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.3.5
  #         terraform_wrapper: false
  #     - name: Authenticate to GCP
  #       uses: 'google-github-actions/auth@v1'
  #       with:
  #         credentials_json: ${{ secrets.SA_CREDENTIALS }}
  #     - name: Setup SDK 
  #       uses: google-github-actions/setup-gcloud@main 
  #       with:
  #         project_id: ${{ secrets.projectid }}
  #         export_default_credentials: true 
  #     - name: Check if registry exists
  #       id: repository_status
  #       run: gcloud run services list | grep ${{ env.project }}-stage | echo ::set-output name=exists::true || echo ::set-output name=exists::false
  #     - name: Create Backend folder
  #       if: steps.repository_status.outputs.exists == 'false'
  #       working-directory: ./bucket
  #       run: terraform init && terraform apply -y -var "folder=${{ env.reponame }}-stage/"

  #     - name: Initialize terraform 
  #       run: terraform init -var "bucket=${{env.reponame}}"
  #     - name: Apply terraform 
  #       run: terraform apply -y -var "name=${{env.reponame}}" -var "version=${GITHUB_REF#refs/*/}" -var "bucket=${{env.reponame}}"
  #     - name: Setup docker 
  #       run: gcloud auth configure-docker --quiet
  
